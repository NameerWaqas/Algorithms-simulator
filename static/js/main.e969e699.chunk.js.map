{"version":3,"sources":["context.js","components/BarChartComponent.js","components/BubbleSortChart.js","Algorithms/Sorting/BubbleSort.js","components/SelectionSortChart.js","Algorithms/Sorting/SelectionSort.js","components/InsertionSortChart.js","Algorithms/Sorting/InsertionSort.js","containers/landingPage.js","containers/navbar.js","App.js","serviceWorker.js","index.js"],"names":["context","React","createContext","ContextProvider","props","useState","data","setData","bubbleSort","selectionSort","insertionSort","count","setCount","Provider","value","children","BarChartComponent","contextData","useContext","snapshots","name","countObj","iterationCounter","useEffect","interval","setTimeout","length","preObj","clearInterval","labels","datasets","label","fill","borderColor","className","css","Paper","Typography","options","maintainAspectRatio","BubbleSortChart","BubbleSortSnapshots","param","split","join","map","str","parseInt","push","slice","i","j","temp","BubbleSort","console","log","SelectionSortChart","SelectionSortSnapshots","currentSmall","currentSmallIndex","SelectionSort","InsertionSortChart","InsertionSortSnapshots","localI","InsertionSort","LandingPage","InputDataComponent","newData","setNewData","TextField","id","onChange","e","target","placeholder","fullWidth","Button","variant","color","onClick","prevObj","NavBar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e969e699.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const context = React.createContext()\n\nexport default function ContextProvider(props) {\n    let [data, setData] = useState(\"3, 2, 5, 4, 1, 6, 8, 7, 9\")\n    let [count,setCount] = useState({\n        bubbleSort:0,\n        selectionSort:0,\n        insertionSort:0\n    })\n    return (\n        <context.Provider value={[data, setData,count,setCount]}>\n            {props.children}\n        </context.Provider>\n    )\n}","import React, { useState, useEffect, useContext } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { css } from 'emotion'\nimport { Card, Typography, Paper } from '@material-ui/core'\nimport { context } from '../context';\n\nexport default function BarChartComponent(props) {\n    let contextData = useContext(context)\n    let { snapshots, name } = props;\n    let countObj = contextData[2]\n    let setCount = contextData[3]\n    let iterationCounter = name==\"Bubble Sort\"?countObj.bubbleSort:name==\"Selection Sort\"?countObj.selectionSort:countObj.insertionSort;\n    // console.log(snapshots,name)\n    useEffect(() => {\n        let interval = setTimeout(() => {\n            if (name == \"Bubble Sort\") {\n                if (countObj.bubbleSort < snapshots.length - 1) {\n                    setCount(preObj => {\n                        return { ...preObj, bubbleSort: preObj.bubbleSort + 1 }\n                    })\n                }\n            }\n            else if(name==\"Selection Sort\") {\n                if (countObj.selectionSort < snapshots.length - 1) {\n                    setCount(preObj => {\n                        return { ...preObj, selectionSort: preObj.selectionSort + 1 }\n                    })\n                }\n            }\n            else{\n                if (countObj.insertionSort < snapshots.length - 1) {\n                    setCount(preObj => {\n                        return { ...preObj, insertionSort: preObj.insertionSort + 1 }\n                    })\n                }\n            }\n        }, 200);\n        return () => clearInterval(interval)\n    }, [iterationCounter])\n\n    const data = {\n        labels: snapshots[snapshots.length - 1],\n        datasets: [\n            {\n                label: `Data Points`,\n                data: snapshots[iterationCounter],\n                fill: true,\n                borderColor: \"rgb(75,192,192,1)\"\n            }\n        ]\n    };\n\n    return (\n        <div className={css`display:inline-block; width: 46vw; height: 46vh;margin:1vw;`}>\n            <Paper>\n                <h1 className={css`text-align:center;`}>{name}</h1>\n                <Typography>Iterations: {iterationCounter}</Typography>\n            </Paper>\n            <Paper className={css`display:flex;align-items:center;justify-content:center;border-radius:1vw;width:inherit;height:inherit;`}>\n                {/* maintainAspectRatio should be set to false to make responsive chart of our own size  */}\n                <Bar data={data} options={{ maintainAspectRatio: false }} />\n            </Paper>\n        </div>\n    )\n}","import React, { useState, useEffect, useContext } from 'react';\nimport BubbleSort from '../Algorithms/Sorting/BubbleSort'\nimport { context } from '../context';\nimport BarChartComponent from \"./BarChartComponent\";\n\nexport default function BubbleSortChart(props) {\n    let contextData = useContext(context)\n    let dataToSort = contextData[0];\n\n    // here slice() is called to make copy of the array;\n    let BubbleSortSnapshots = BubbleSort(dataToSort.slice());\n    console.log(BubbleSortSnapshots,\"Bubble\")\n\n    return (\n        <BarChartComponent snapshots={BubbleSortSnapshots} name=\"Bubble Sort\"/>\n    );\n}\n\n","export default function BubbleSort(param){\n    let snapshots = []\n    let data = param.split(' ')\n    data = data.join(\"\")\n    data = param.split(',')\n    data = data.map((str)=>parseInt(str))\n    // slice() function is making copy of the array;\n    snapshots.push(data.slice())\n    for(let i=0;i<data.length-1;i++){\n      for(let j=0;j<data.length-1-i;j++){  \n          if(data[j]>data[j+1]){          \n            let temp = data[j];\n            data[j] = data[j+1]\n            data[j+1]=temp\n          }\n        }\n        snapshots.push(data.slice())\n      }\n      // console.log(snapshots[snapshots.length-1])\n    return snapshots\n  }","import React, { useContext } from 'react';\nimport SelectionSort from '../Algorithms/Sorting/SelectionSort';\nimport { context } from '../context';\nimport BarChartComponent from \"./BarChartComponent\";\n\nexport default function SelectionSortChart(props){\n    let contextData = useContext(context);\n    let dataToSort = contextData[0];\n    let SelectionSortSnapshots = SelectionSort(dataToSort.slice());\n    console.log(SelectionSortSnapshots,\"select\")\n    return(\n        <BarChartComponent  snapshots={SelectionSortSnapshots} name=\"Selection Sort\"/>\n    )\n}","export default function SelectionSort(param) {\n    let snapshots = []\n    let data = param.split(' ')\n    data = data.join(\"\")\n    data = param.split(',')\n    data = data.map((str) => parseInt(str))\n    for (var i = 0; i < data.length - 1; i++) {\n        let currentSmall = data[i];\n        let currentSmallIndex = i;\n        let temp;\n        for (var j = i + 1; j < data.length; j++) {\n            if (currentSmall > data[j]) {\n                currentSmall = data[j]\n                currentSmallIndex = j\n            }\n        }\n        temp = data[i]\n        data[i] = data[currentSmallIndex]\n        data[currentSmallIndex] = temp\n        snapshots.push(data.slice())\n        // console.log(data)\n    }\n    return snapshots\n}","import React,{useContext} from 'react';\nimport InsertionSort from '../Algorithms/Sorting/InsertionSort';\nimport BarChartComponent from './BarChartComponent';\nimport {context} from '../context';\n\nexport default function InsertionSortChart(props){\n    let contextData = useContext(context)\n    let dataToSort = contextData[0];\n    let InsertionSortSnapshots = InsertionSort(dataToSort)\n    return(\n        <BarChartComponent snapshots={InsertionSortSnapshots} name=\"Insertion Sort\"/>\n    )\n}","export default function InsertionSort(param) {\n    let snapshots = []\n    let data = param.split(' ')\n    data = data.join(\"\")\n    data = param.split(',')\n    data = data.map((str) => parseInt(str))\n    // slice() function is making copy of the array;\n    snapshots.push(data.slice())\n\n    for (var i = 1; i < data.length; i++) {\n        let localI = i;\n        while (true) {\n            let temp;\n            if (data[localI] < data[localI - 1] && localI > 0) {\n                temp = data[localI];\n                data[localI] = data[localI - 1];\n                data[localI - 1] = temp;\n                localI -= 1\n            }\n            else {\n                break;\n            }\n        }\n        snapshots.push(data.slice())\n    }\n    return snapshots;\n}","import React, { useContext, useState } from 'react';\nimport { TextField, FormControl, Button } from '@material-ui/core';\nimport { context } from '../context';\nimport { css } from 'emotion';\nimport BubbleSortChart from '../components/BubbleSortChart';\nimport SelectionSortChart from '../components/SelectionSortChart';\nimport InsertionSortChart from '../components/InsertionSortChart'\n\nexport default function LandingPage(props) {\n    return (\n        <>\n            <InputDataComponent />\n            <BubbleSortChart />\n            <SelectionSortChart />\n            <InsertionSortChart />\n        </>\n    )\n}\n\nfunction InputDataComponent(props) {\n    let contextData = useContext(context)\n    let data = contextData[0];\n    let setData = contextData[1];\n    let setCount = contextData[3]\n    let [newData, setNewData] = useState(data);\n\n    let handleChange = (e) => {\n        setNewData(e.target.value);\n        console.log(newData)\n    }\n\n    let handleUpdateData = () => {\n        setData(newData);\n        setCount(prevObj => {\n            return { ...prevObj, bubbleSort: 0, selectionSort: 0, insertionSort: 0 }\n        })\n    }\n    return (\n        <>\n            {/* Input componet for taking data */}\n            <div className={css`display:flex;flex-direction:row;`}>\n                <section className={css`flex:9;`}>\n                    <TextField id='standard-basic' label='Enter data here' onChange={handleChange}\n                        placeholder=\"Enter comma seprated values only like: 1,2,3,4\" fullWidth />\n                </section>\n                <section className={css`flex:1;height:100%;align-self:center;`}>\n                    <Button variant='contained' color='primary' fullWidth\n                        onClick={handleUpdateData}>Sort Data</Button>\n                </section>\n            </div>\n        </>\n    )\n}","import React from 'react';\nimport {css} from 'emotion'\n\nexport default function NavBar(props){\n    return(\n        <div \n        className={css`width:100vw;height:10vh;background-color:teal`}>\n        <h1 className={css`color:white;`}>Algorithms Simulator!</h1>\n        </div>\n    )\n}","import React from 'react';\nimport './app.css'\nimport ContextProvider from './context'\nimport LandingPage from './containers/landingPage'\nimport NavBar from './containers/navbar';\n\n\nfunction App() {\n  return (\n    <ContextProvider>\n      <NavBar/>\n      <LandingPage/>\n    </ContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}